/******************************************************************************
**              Copyright (C) 2019 Laird Connectivity
**
** Project:     Intelligent Serial Dongle - Host AT Processor
**
** Module:      BASEHOST.CPP
**
*******************************************************************************/

/******************************************************************************/
// CONDITIONAL COMPILE DEFINES
/******************************************************************************/

/******************************************************************************/
// Include Files
/******************************************************************************/
#include "Target.h"

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>

#include "BaseHost.h"
/******************************************************************************/
// Local Defines
/******************************************************************************/

/******************************************************************************/
// Local Macros
/******************************************************************************/

/******************************************************************************/
// Local Forward Class,Struct & Union Declarations
/******************************************************************************/

/******************************************************************************/
// Local Class,Struct,Union Typedefs
/******************************************************************************/

/******************************************************************************/
// External Variable Declarations
/******************************************************************************/

/******************************************************************************/
// Global/Static Variable Declarations
/******************************************************************************/

/******************************************************************************/
// External Function Declarations
/******************************************************************************/

/******************************************************************************/
// Local Forward Function Declarations
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
// Local Functions or Private Members
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
// Global Functions or Public Members
/******************************************************************************/
/******************************************************************************/

//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
TBaseHost::TBaseHost(TRegression *pRegression, unsigned int nLogicalPort)
{
    mpRegression = pRegression;
    mnLogicalPort = nLogicalPort;
    SetHostType("BASE");
    mPacketCount = 0;
}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
__fastcall TBaseHost::~TBaseHost()
{
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
void TBaseHost::SetHostType(char *pName)
{
    strncpy(baHostType,pName,MAX_HOSTTYPE_NAMELEN);
    baHostType[MAX_HOSTTYPE_NAMELEN]=0;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
const char *TBaseHost::GetHostType(void)
{
    return baHostType;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
bool TBaseHost::IsPacketPresent(TPacketType pktType)
{
    return false;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
char * TBaseHost::GetPacket(int *pPktLen,TPacketType pktType)
{
    *pPktLen=0;
    return NULL;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
int TBaseHost::DropPacket(TPacketType pktType)
{
    return 0;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
int TBaseHost::PortIoctl(int ioctlId, int nArg, void *pInArg, void *pOutArg)
{
    return 0;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
unsigned int TBaseHost::GetPacketCount(void)
{
    return mPacketCount;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
unsigned int TBaseHost::SetPacketCount(unsigned int nNewCount)
{
    unsigned int nOldCount = mPacketCount;
    mPacketCount =  nNewCount;
    return nOldCount;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
unsigned int TBaseHost::GetPacketCountInResp(void)
{
    return 0;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
char * TBaseHost::GetDataInResponse(unsigned int nChannel)
{
    return GetFullResponse();
}

/******************************************************************************/
// END OF FILE
/******************************************************************************/

