/******************************************************************************
**              Copyright (C) 2018 Laird Connectivity
**
** Module:      TPipeCache.CPP
**
*******************************************************************************/

/******************************************************************************/
// CONDITIONAL COMPILE DEFINES
/******************************************************************************/

/******************************************************************************/
// Include Files
/******************************************************************************/
#include "Target.h"

#include "TPipeCache.h"
/******************************************************************************/
// Local Defines
/******************************************************************************/

/******************************************************************************/
// Local Macros
/******************************************************************************/

/******************************************************************************/
// Local Forward Class,Struct & Union Declarations
/******************************************************************************/

/******************************************************************************/
// Local Class,Struct,Union Typedefs
/******************************************************************************/

/******************************************************************************/
// External Variable Declarations
/******************************************************************************/

/******************************************************************************/
// Global/Static Variable Declarations
/******************************************************************************/


/******************************************************************************/
// External Function Declarations
/******************************************************************************/

/******************************************************************************/
// Local Forward Function Declarations
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
// Local Functions or Private Members
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
// Global Functions or Public Members
/******************************************************************************/
/******************************************************************************/


//------------------------------------------------------------------------------
// Constructor
//------------------------------------------------------------------------------
CPipeCache::CPipeCache(int size)
{
    mnHead=0;
    mnTail=0;
    mpCache  = (char *)malloc(size);
    mnSize = (mpCache != NULL) ? size : 0;
}

//------------------------------------------------------------------------------
// Destructor
//------------------------------------------------------------------------------
CPipeCache::~CPipeCache()
{
    if(mpCache)
    {
        free( mpCache );
    }
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CPipeCache::GetSpace()
{
    return mnSize - (((mnHead - mnTail)+mnSize)%mnSize);
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CPipeCache::Write( char * data , int nBytes)
{
    int nRetVal;
    int nSpace;
    int nTail = mnTail;
    int nFree = mnSize - (((mnHead - nTail)+mnSize)%mnSize);
    if( nBytes > nFree)nBytes = nFree;
    nRetVal = nBytes;

    while(nFree && nBytes)
    {
        if(mnHead >= nTail)
        {
            nSpace = mnSize - mnHead;
        }
        else
        {
            nSpace = nTail - mnHead - 1;
        }

        if( nSpace > nBytes)nSpace=nBytes;
        memcpy( &mpCache[mnHead],data,nSpace );
        int nHead = mnHead + nSpace;
        mnHead  = nHead % mnSize;
        data   += nSpace;
        nBytes -= nSpace;

        nFree = mnSize - (((mnHead - nTail)+mnSize)%mnSize);
    }
    return nRetVal;
}

//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
int CPipeCache::Read( char * data, int nMaxBytes )
{
    int nRetVal = nMaxBytes;
    int nHead = mnHead;
    int nUsed = ((nHead - mnTail)+mnSize)%mnSize;
    if( nUsed < nRetVal )
    {
        nRetVal = nUsed;
    }
    if( nRetVal )
    {
        if( nHead >= mnTail )
        {
            memcpy(data,&mpCache[mnTail],nRetVal);
        }
        else
        {
            int nTop = mnSize - mnTail;
            memcpy(data,&mpCache[mnTail],nTop);
            memcpy(data,&mpCache[0],(nRetVal-nTop));
        }
        int nTail = mnTail + nRetVal;
        mnTail    = nTail % mnSize;
    }
    return nRetVal;
}


/******************************************************************************/
// END OF FILE
/******************************************************************************/


